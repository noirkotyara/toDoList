{"version":3,"sources":["components/ToDoLists/Lists.module.css","components/Header/Header.module.css","components/ToDoLists/ToDoTasks/Tasks.module.css","components/Common/Preloader.module.css","assets/preloader.svg","components/Common/Preloader.jsx","components/Header/Header.jsx","components/Header/HeaderContainer.jsx","api/api.js","redux/todo-reducer.js","redux/todoTasks-reducer.js","components/ToDoLists/ToDoTasks/Task.jsx","components/ToDoLists/ToDoTasks/Tasks.jsx","components/ToDoLists/List.jsx","components/ToDoLists/Lists.jsx","components/ToDoLists/ToDoContainer.jsx","App.js","reportWebVitals.js","redux/redux-store.js","index.js"],"names":["module","exports","Preloader","className","style","preloader","src","alt","Header","props","header","isFetching","to","logoName","activeClassName","activeNavLink","login","connect","state","toDoPage","instance","axios","withCredentials","baseURL","headers","toDoAPI","get","then","response","data","title","post","todolistId","put","delete","putAfterItemId","tasksAPI","taskId","updateTask","SET_LISTS","CREATE_LIST","DELETE_LIST","RENAME_LIST","IS_FETCH","CHANGE_ORD","initial","lists","tasks","deleteList","type","renameTitle","bool","changeOrder","action","list","filter","id","map","a","indexs","array","forEach","elem","index","item","GET_TASKS","POST_TASK","DEL_TASK","UPDATE_TASK","REORDER_TASK","default","description","completed","status","priority","startDate","deadline","deleteTask","reorderTask","toDoTasksPage","taskItem","task","Task","React","memo","useState","newTask","changeNewTask","editMode","changeEditMode","TaskText","changeTaskText","changeOrderTasks","reoderTask","taskArray","todoListId","autoFocus","onBlur","onChange","e","text","currentTarget","value","onDoubleClick","length","onClick","cols","postTasks","Tasks","viewMode","changeViewMode","viewTasks","getTasks","List","choosedTitle","changeTitle","newTitleText","changeNewTitleText","updateTitle","listsArray","date","Date","addedDate","listUI","delTitle","toDateString","Lists","newTitle","changeNewTitle","useEffect","getLists","textTitle","postList","content","dispatch","resultCode","items","updatedTaskObject","App","HeaderContainer","path","render","ToDoContainer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","require","combineReducers","createStore","applyMiddleware","store","thunkMiddleware","ReactDOM","document","getElementById"],"mappings":"0GACAA,EAAOC,QAAU,CAAC,OAAS,sBAAsB,QAAU,uBAAuB,SAAW,wBAAwB,MAAQ,qBAAqB,SAAW,0B,mBCA7JD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,SAAW,yBAAyB,MAAQ,sBAAsB,UAAY,4B,mBCAhID,EAAOC,QAAU,CAAC,UAAY,yBAAyB,SAAW,wBAAwB,OAAS,wB,mBCAnGD,EAAOC,QAAU,CAAC,UAAY,+B,qLCDf,MAA0B,sC,iBCQ1BC,EANG,WACd,OAAO,8BACH,qBAAKC,UAAWC,IAAMC,UAAWC,IAAKD,EAAWE,IAAI,iBCa9CC,EAbA,SAACC,GACZ,OAAO,mCACH,sBAAKN,UAAWC,IAAMM,OAAtB,UACA,sBAAKP,UAAWC,IAAMC,UAAtB,eAAoCI,EAAME,YAAc,cAAC,EAAD,OACpD,cAAC,IAAD,CAASC,GAAG,YAAYT,UAAWC,IAAMS,SAAUC,gBAAiBV,IAAMW,cAA1E,mBAGA,cAAC,IAAD,CAASH,GAAG,SAAST,UAAWC,IAAMY,MAAOF,gBAAiBV,IAAMW,cAApE,yBCFGE,eANS,SAACC,GACrB,MAAM,CACFP,WAAYO,EAAMC,SAASR,cAIK,GAAzBM,CAGdT,G,uCCVKY,E,MAAWC,OAAa,CAC1BC,iBAAiB,EACjBC,QAAS,+CACTC,QAAS,CAAE,UAAW,0CAoBbC,EAAU,WAEf,OAAOL,EAASM,IAAT,eACFC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAH1BJ,EAAU,SAKLK,GACV,OAAOV,EAASW,KAAT,cAA6B,CAACD,UAChCH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAP1BJ,EAAU,SAWJO,EAAYF,GACvB,OAAOV,EAASa,IAAT,sBAA4BD,GAAc,CAACF,UAC7CH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAb1BJ,EAAU,SAgBJO,GACX,OAAOZ,EAASc,OAAT,sBAA+BF,IACjCL,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAlB1BJ,EAAU,SAqBHO,EAAYG,GAExB,OAAOf,EAASa,IAAT,sBAA4BD,EAA5B,YAAkD,CAACG,eAAgBA,IACrER,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAK1BO,EAAW,SACXJ,GACL,OAAOZ,EAASM,IAAT,sBAA4BM,EAA5B,WACFL,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAH1BO,EAAW,SAKVJ,EAAYF,GAClB,OAAOV,EAASW,KAAT,sBAA6BC,EAA7B,UAAiD,CAACF,UACpDH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAP1BO,EAAW,SASRJ,EAAYK,GACpB,OAAOjB,EAASc,OAAT,sBAA+BF,EAA/B,kBAAmDK,IACrDV,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAX1BO,EAAW,SAaRJ,EAAYK,EAAQC,GAC5B,OAAOlB,EAASa,IAAT,sBAA4BD,EAA5B,kBAAgDK,GAAUC,GAC5DX,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAf1BO,EAAW,SAiBPJ,EAAYK,EAAQF,GAC7B,OAAOf,EAASa,IAAT,sBAA4BD,EAA5B,kBAAgDK,EAAhD,YAAkE,CAACF,mBACrER,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCvEjCU,EAAY,YAEZC,EAAc,cACdC,EAAc,cACdC,EAAc,cACdC,EAAW,WACXC,EAAa,aAGbC,EAAU,CACZC,MAAO,CACH,CACI,GAAM,uCACN,MAAS,YACT,UAAa,0BACb,MAAS,IAGjBC,MAAO,GACPpC,YAAY,GAgEVqC,EAAa,SAAChB,GAAD,MAAiB,CAAEiB,KAAMR,EAAaT,eACnDkB,EAAc,SAAClB,EAAYF,GAAb,MAAwB,CAAEmB,KAAMP,EAAaV,aAAYF,UACvEnB,EAAa,SAACwC,GAAD,MAAW,CAAEF,KAAMN,EAAUQ,SAC1CC,EAAc,SAACpB,EAAYG,EAAgBgB,GAA7B,MAAuC,CAAEF,KAAML,EAAYZ,aAAYG,iBAAgBgB,SAkC5FhC,EAlGE,WAA8B,IAA7BD,EAA4B,uDAApB2B,EAASQ,EAAW,uCAE1C,OAAQA,EAAOJ,MACX,KAAKV,EAED,OAAO,2BACArB,GADP,IAEI4B,MAAOO,EAAOP,QAGtB,KAAKN,EACD,OAAO,2BACAtB,GADP,IAEI4B,MAAM,CAAEO,EAAOC,MAAV,mBAAmBpC,EAAM4B,UAGtC,KAAKL,EACD,OAAO,2BACAvB,GADP,IAEI4B,MAAO5B,EAAM4B,MAAMS,QAAO,SAAAD,GAAI,OAAIA,EAAKE,KAAOH,EAAOrB,gBAG7D,KAAKU,EACD,OAAO,2BACAxB,GADP,IAEI4B,MAAO5B,EAAM4B,MAAMW,KAAI,SAAAH,GAAU,OAAIA,EAAKE,KAAOH,EAAOrB,WAAqB,2BAAKsB,GAAZ,IAAkBxB,MAAOuB,EAAOvB,QAAsBwB,OAGpI,KAAKX,EACD,OAAO,2BACAzB,GADP,IAEIP,WAAY0C,EAAOF,OAG3B,KAAKP,EACD,IAAIc,EAAGC,EACHC,EAAQ1C,EAAM4B,MAWlB,OATAc,EAAMC,SAAQ,SAACC,EAAMC,GACbD,EAAKN,KAAOH,EAAOrB,aACnB2B,EAASI,MAIjBL,EAAIE,EAAMD,GACVC,EAAMD,GAAUC,EAAMD,EAAS,GAC/BC,EAAMD,EAAS,GAAKD,EACb,2BACAxC,GADP,IAEI4B,MAAOc,EAAMH,KAAI,SAAAO,GAAS,OAAOA,OAGzC,QACI,OAAO9C,IC3Eb+C,EAAY,YACZC,EAAY,YACZC,EAAW,WACXC,EAAc,cACdC,EAAe,eAGfxB,EAAU,CACZE,MAAO,GACPuB,QAAS,CACLC,YAAa,UACbC,WAAW,EACXC,OAAQ,EACRC,SAAU,EACVC,UAAW,OACXC,SAAU,UA8DZC,EAAa,SAACxC,GAAD,MAAa,CAAEY,KAAMkB,EAAU9B,WAC5CC,GAAa,SAACD,EAAQ2B,GAAT,MAAmB,CAAEf,KAAMmB,EAAa/B,SAAQ2B,SAC7Dc,GAAc,SAACzC,GAAD,MAAa,CAACY,KAAMoB,EAAchC,WAgCvC0C,GA5FO,WAA8B,IAA7B7D,EAA4B,uDAApB2B,EAASQ,EAAW,uCAE/C,OAAQA,EAAOJ,MACX,KAAKgB,EACD,OAAO,2BACA/C,GADP,IAEI6B,MAAOM,EAAON,QAGtB,KAAKmB,EACD,OAAO,2BACAhD,GADP,IAEI6B,MAAM,CAAEM,EAAO2B,UAAV,mBAAuB9D,EAAM6B,UAG1C,KAAKoB,EACD,OAAO,2BACAjD,GADP,IAEI6B,MAAO7B,EAAM6B,MAAMQ,QAAO,SAAAO,GAAI,OAAIA,EAAKN,KAAOH,EAAOhB,YAG7D,KAAK+B,EACD,OAAO,2BACAlD,GADP,IAEI6B,MAAO7B,EAAM6B,MAAMU,KAAI,SAAAwB,GACnB,OAAKA,EAAKzB,KAAOH,EAAOhB,OACbgB,EAAOW,KAENiB,OAIxB,KAAKZ,EACD,IAAIX,EAAGC,EACHC,EAAQ1C,EAAM6B,MAWlB,OATAa,EAAMC,SAAQ,SAACC,EAAMC,GACbD,EAAKN,KAAOH,EAAOhB,SACnBsB,EAASI,MAIjBL,EAAIE,EAAMD,GACVC,EAAMD,GAAUC,EAAMD,EAAS,GAC/BC,EAAMD,EAAS,GAAKD,EACb,2BACAxC,GADP,IAEI6B,MAAOa,EAAMH,KAAI,SAAAO,GAAS,OAAOA,OAGzC,QACI,OAAO9C,I,iDCKJgE,GA1EFC,IAAMC,MAAK,SAAA3E,GAAU,IAAD,EAEE4E,mBAAS,IAFX,oBAExBC,EAFwB,KAEfC,EAFe,OAIIF,oBAAS,GAJb,oBAIxBG,EAJwB,KAIdC,EAJc,OAKIJ,mBAAS,IALb,oBAKxBK,EALwB,KAKdC,EALc,KA0BzBC,EAAmB,SAACvD,EAAQF,GAC5B1B,EAAMoF,WAAWpF,EAAM+C,GAAInB,EAAQF,IAInC2D,EAAYrF,EAAMsC,MAAMU,KAAI,SAACwB,EAAMlB,EAAOH,GAC1C,GAAIqB,EAAKc,aAAetF,EAAM+C,GAC1B,OAAO,qBAAmBrD,UAAWC,KAAM4E,SAApC,SACH,gCACKQ,EACC,uBAAOQ,WAAW,EAAMC,OAAQ,kBAhBxB5D,EAgBiD4C,EAAKzB,GAf5EiC,GAAgBD,QAEhB/E,EAAM6B,WAAW7B,EAAM+C,GAAInB,EAAQqD,GAHd,IAACrD,GAgB2D6D,SAAU,SAACC,GAAD,OAzB5EC,EAyB+FD,EAAEE,cAAcC,WAxB9HX,EAAeS,GADD,IAACA,GAyBuHnD,KAAK,OAAOqD,MAAOZ,IAC3I,sBAAMa,cAAe,kBAtBdH,EAsBsCnB,EAAKnD,MArBhE6D,EAAeS,QACfX,GAAgBD,GAFI,IAACY,GAsBP,SAA2DnB,EAAKnD,QAElE,iCACKiC,EAAQH,EAAM4C,OAAO,GAAK,uBAAOC,QAAS,kBAAMb,EAAiBhC,EAAMG,GAAOP,GAAII,EAAMG,EAAM,GAAGP,KAAKP,KAAK,SAASqD,MAAM,MAC1HvC,EAAQ,GAAK,uBAAO0C,QAAS,kBAAMb,EAAiBhC,EAAMG,EAAM,GAAGP,GAAII,EAAMG,GAAOP,KAAKP,KAAK,SAASqD,MAAM,SAElH,sBAAMG,QAAS,kBApCbpE,EAoC8B4C,EAAKzB,QAnCjD/C,EAAMoE,WAAWpE,EAAM+C,GAAInB,GADd,IAACA,GAoCwClC,UAAWC,KAAM8B,OAA3D,mBAVS+C,EAAKzB,OA2B9B,OACI,gCACI,gCACI,0BAAU8C,MAAOhB,EAASY,SAAU,SAACC,GAAD,OAbxBC,EAagDD,EAAEE,cAAcC,WAZpFf,EAAca,GADK,IAACA,GAawEM,KAAK,OACzF,uBAAOD,QAVL,WAEVhG,EAAMkG,UAAUlG,EAAM+C,GAAI8B,GAC1BC,EAAc,KAOmBtC,KAAK,SAASqD,MAAM,WAEjD,8BACKR,UCzCFc,GAzBDzB,IAAMC,MAAK,SAAA3E,GAAU,IAAD,EAEG4E,oBAAS,GAFZ,oBAEzBwB,EAFyB,KAEfC,EAFe,KAe9B,OACI,gCACI,sBAAO3G,UAAWC,KAAM2G,UAAWN,QAAS,kBAZnCjD,EAYmD/C,EAAM+C,GAXtEsD,GAAgBD,QAChBpG,EAAMuG,SAASxD,GAFH,IAACA,GAYT,wBACCqD,GAAY,8BACT,cAAC,GAAD,eAAUpG,YC8CXwG,GAhEF,SAACxG,GAAW,IAAD,EAEa4E,oBAAS,GAFtB,oBAEfG,EAFe,KAELC,EAFK,OAGcJ,mBAAS,GAHvB,oBAGf6B,EAHe,KAGDC,EAHC,OAIqB9B,mBAAS,IAJ9B,oBAIf+B,EAJe,KAIDC,EAJC,KAShBC,EAAc,WACd7G,EAAMyC,YAAYgE,EAAcE,GAChC3B,GAAe,GACf4B,EAAmB,KAShBjE,EAAc,SAACpB,EAAYG,EAAgBgB,GAC9C1C,EAAM2C,YAAYpB,EAAYG,EAAgBgB,IAG9CoE,EAAa9G,EAAMqC,MAAMW,KAAI,SAACH,EAAMS,EAAOH,GAC3C,IAAI4D,EAAO,IAAIC,KAAKnE,EAAKoE,WACzB,OAAQ,sBAAmBvH,UAAWC,KAAMuH,OAApC,UACJ,sBAAKxH,UAAWC,KAAM0B,MAAtB,UAEI,+BACK0D,GAAYlC,EAAKE,KAAO0D,EACxB,uBAAOjB,OAAQqB,EAAatB,WAAW,EAAME,SAAU,SAACC,GAAD,OAAOkB,EAAmBlB,EAAEE,cAAcC,QAAQA,MAAOc,IAChH,sBAAMb,cAAe,kBAnBdH,EAmBqC9C,EAAKxB,MAnBpC0B,EAmB2CF,EAAKE,GAlB1E2D,EAAY3D,GACZ6D,EAAmBjB,QACnBX,GAAe,GAHI,IAACW,EAAM5C,GAmBb,SAAmEF,EAAKxB,UAG7E,sBAAM2E,QAAS,kBA9BTzE,EA8B0BsB,EAAKE,QA7B7C/C,EAAMuC,WAAWhB,GADJ,IAACA,GA8BoC7B,UAAWC,KAAMwH,SAA3D,kBAIJ,qBAAKzH,UAAWC,KAAM2C,MAAtB,SACI,8BACI,cAAC,GAAD,CAAO4D,UAAWlG,EAAMkG,UACxB9B,WAAcpE,EAAMoE,WACpBmC,SAAUvG,EAAMuG,SAChBxD,GAAIF,EAAKE,GACTqC,WAAcpF,EAAMoF,WACpBvD,WAAc7B,EAAM6B,WACpBS,MAAOtC,EAAMsC,YAIrB,gCACKgB,EAAQH,EAAM4C,OAAO,GAAK,uBAAOC,QAAS,kBAAMrD,EAAYQ,EAAMG,GAAOP,GAAII,EAAMG,EAAM,GAAGP,IAAK,IAAQP,KAAK,SAASqD,MAAM,MAC7HvC,EAAQ,GAAK,uBAAO0C,QAAS,kBAAMrD,EAAYQ,EAAMG,EAAM,GAAGP,GAAII,EAAMG,GAAOP,IAAI,IAAOP,KAAK,SAASqD,MAAM,SAEnH,qBAAKnG,UAAWC,KAAMsH,UAAtB,SAAkCF,EAAKK,mBA7BzBvE,EAAKE,OAiC3B,OAAQ,mCACP+D,KCrBUO,GAxCD3C,IAAMC,MAAK,SAAA3E,GAAU,IAAD,EACG4E,mBAAS,IADZ,oBACzB0C,EADyB,KACfC,EADe,KAI9BC,qBAAU,WACNxH,EAAMyH,aACP,IAWH,OAAO,gCAEH,sBAAK/H,UAAWC,KAAM2H,SAAtB,UACI,sBAAM5H,UAAWC,KAAM+H,UAAvB,6BAIA,gCACI,0BAAU7B,MAAOyB,EAAU7B,SAAU,SAACC,GAAD,OAjBxBC,EAiBiDD,EAAEE,cAAcC,WAhBtF0B,EAAe5B,GADK,IAACA,GAiByEM,KAAK,OAC3F,uBAAOD,QAdJ,WACXhG,EAAM2H,SAASL,GACfC,EAAe,KAYmB/E,KAAK,SAASqD,MAAM,iBAKtD,qBAAKnG,UAAWC,KAAMiI,QAAtB,SACI,cAAC,GAAD,eACI5H,YCxBDQ,gBATS,SAACC,GACrB,MAAM,CACF4B,MAAO5B,EAAMC,SAAS2B,MACtBnC,WAAYO,EAAMC,SAASR,WAC3BoC,MAAO7B,EAAM6D,cAAchC,SAKK,CACpCmF,SN4EoB,yDAAM,WAAOI,GAAP,eAAA5E,EAAA,6DAC1B4E,EAAS3H,GAAW,IADM,SAELc,IAFK,OAEtBG,EAFsB,OAG1B0G,EAAS3H,GAAW,IACC,IAApBiB,EAAS4E,QAAiB8B,EAbF,CAAErF,KAAMV,EAAWO,MAaClB,IAJnB,2CAAN,uDM3EpBwG,SNkFoB,SAACtG,GAAD,8CAAW,WAAOwG,GAAP,eAAA5E,EAAA,sEACVjC,EAAsBK,GADZ,OAEN,KADrBF,EAD2B,QAErB2G,YAAqBD,GAhBfhF,EAgBmC1B,EAASC,KAAKmC,KAhBvC,CAAEf,KAAMT,EAAac,UAchB,iCAdhB,IAACA,IAce,OAAX,uDMjFpBN,WNsF2B,SAAChB,GAAD,8CAAgB,WAAOsG,GAAP,SAAA5E,EAAA,sEACtBjC,EAAuBO,GADD,OAElB,IAFkB,OAEjCuG,YAAqBD,EAAStF,EAAWhB,IAFR,2CAAhB,uDMrF3BkB,YN2F4B,SAAClB,EAAYF,GAAb,8CAAuB,WAAOwG,GAAP,SAAA5E,EAAA,sEAC9BjC,EAAuBO,EAAYF,GADL,OAE1B,IAF0B,OAEzCyG,YAAqBD,EAASpF,EAAYlB,EAAYF,IAFb,2CAAvB,uDM1F5BkF,SLgEyB,SAAChF,GAAD,8CAAgB,WAAOsG,GAAP,eAAA5E,EAAA,sEACpBtB,EAAkBJ,GADE,OACrCJ,EADqC,OAEzC0G,GARcvF,EAQInB,EAAS4G,MARF,CAAEvF,KAAMgB,EAAWlB,WAMH,iCAN5B,IAACA,IAM2B,OAAhB,uDK/DzBK,YN8F4B,SAACpB,EAAYG,EAAgBgB,GAA7B,8CAAsC,WAAOmF,GAAP,SAAA5E,EAAA,sEAC7CjC,EAAwBO,EAAYG,GADS,OAGzC,IAHyC,OAGxDoG,YAAqBD,EAASlF,EAAYpB,EAAYG,EAAgBgB,IAHd,2CAAtC,uDM7F5BwD,ULmE0B,SAAC3E,EAAYF,GAAb,8CAAuB,WAAOwG,GAAP,eAAA5E,EAAA,sEAC5BtB,EAAmBJ,EAAYF,GADH,OAExB,KADrBF,EAD6C,QAEvC2G,YAAqBD,GAZhBtD,EAYmCpD,EAASC,KAAKmC,KAZnC,CAAEf,KAAMiB,EAAWc,cAUC,iCAVnC,IAACA,IAUkC,OAAvB,uDKlE1BH,WLuE2B,SAAC7C,EAAYK,GAAb,8CAAwB,WAAOiG,GAAP,SAAA5E,EAAA,sEAC9BtB,EAAqBJ,EAAYK,GADH,OAE1B,IAF0B,OAEzCkG,YAAqBD,EAASzD,EAAWxC,IAFA,2CAAxB,uDKtE3BC,WL4EA,SAACN,EAAYK,EAAQP,GAArB,IACIyC,EADJ,uDACkB,UAAWC,EAD7B,wDAEIC,EAFJ,uDAEa,EAAGC,EAFhB,uDAE2B,EAAGC,EAF9B,uDAE0C,0BACtCC,EAHJ,uDAGe,0BAHf,8CAG6C,WAAO0D,GAAP,iBAAA5E,EAAA,6DACjC+E,EAAoB,CAAE3G,QAAOyC,cAAaC,YAAWC,SAAQC,WAAUC,YAAWC,YADjD,SAEhBxC,EAAqBJ,EAAYK,EAAQoG,GAFzB,OAGZ,KADrB7G,EAFiC,QAG3B2G,YAAqBD,EAAShG,GAAWD,EAAQT,EAASC,KAAKmC,OAHpC,2CAH7C,uDK3EA6B,WLoF2B,SAAC7D,EAAYK,EAAQF,GAArB,8CAAwC,WAAOmG,GAAP,SAAA5E,EAAA,sEAC9CtB,EAAsBJ,EAAYK,EAAQF,GADI,OAE1C,IAF0C,OAEzDoG,YAAqBD,EAASxD,GAAYzC,IAFe,2CAAxC,wDK9FhBpB,CAWZ6G,ICJYY,OAdf,WACE,OAAQ,qCACN,iCACE,cAACC,EAAD,MAGF,8BACE,cAAC,IAAD,CAAOC,KAAK,YAAYC,OAAQ,kBAAK,cAACC,GAAD,aCF5BC,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtH,MAAK,YAAkD,IAA/CuH,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,YCJ4CO,EAAQ,IAA1DC,G,GAAAA,gBAAiBC,G,GAAAA,YAAaC,G,GAAAA,gBAOzBC,GAAQF,GALJD,GAAgB,CAC7BrI,WACA4D,mBAGuC2E,GAAgBE,OCD3DC,IAAShB,OACP,cAAC,IAAD,UACE,cAAC,IAAD,CAAUc,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGJG,SAASC,eAAe,SAM1BhB,O","file":"static/js/main.e4dd9348.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"listUI\":\"Lists_listUI__-vnkx\",\"content\":\"Lists_content__1AJGR\",\"newTitle\":\"Lists_newTitle__3N7g-\",\"tasks\":\"Lists_tasks__1aGOt\",\"delTitle\":\"Lists_delTitle__1imay\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2r7ZA\",\"logoName\":\"Header_logoName__3EjN4\",\"login\":\"Header_login__1LjQE\",\"preloader\":\"Header_preloader__2r9TX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"viewTasks\":\"Tasks_viewTasks__1scqd\",\"taskItem\":\"Tasks_taskItem__2ipKA\",\"delete\":\"Tasks_delete__2EBrm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__3xylh\"};","export default __webpack_public_path__ + \"static/media/preloader.9139a1f3.svg\";","import preloader from './../../assets/preloader.svg';\r\nimport style from './Preloader.module.css';\r\nconst Preloader = () => {\r\n    return <div>\r\n        <img className={style.preloader} src={preloader} alt=\"preloader\"/>\r\n    </div>\r\n}\r\n\r\nexport default Preloader;","import { NavLink } from 'react-router-dom';\r\nimport style from './Header.module.css';\r\nimport Preloader from './../Common/Preloader';\r\n\r\nconst Header = (props) => {\r\n    return(<>\r\n        <div className={style.header}>\r\n        <div className={style.preloader}>  {props.isFetching && <Preloader/> }</div>\r\n            <NavLink to='/todolist' className={style.logoName} activeClassName={style.activeNavLink}>\r\n                MKdir\r\n            </NavLink >  \r\n            <NavLink to='/login' className={style.login} activeClassName={style.activeNavLink}>\r\n                Login\r\n            </NavLink >  \r\n        </div>\r\n    </>);\r\n} \r\nexport default Header;","import { connect } from \"react-redux\"\r\nimport Header from \"./Header\"\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        isFetching: state.toDoPage.isFetching\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n\r\n})\r\n(Header);","import * as axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    headers: { 'API-KEY': 'ebd28442-c10f-47c7-b19b-27d6fc3e2b96' }\r\n});\r\n\r\n\r\nexport const authAPI = {\r\n    isAuthMe() {\r\n        return instance.get(`/auth/me`)\r\n            .then(response => response.data);\r\n    },\r\n    logIn(email, password, rememberMe) {\r\n\r\n        return instance.post(`/auth/login`, { email, password, rememberMe })\r\n            .then(response => response.data);\r\n    },\r\n    logOut() {\r\n        return instance.delete(`/auth/login`)\r\n            .then(response => response.data);\r\n    }\r\n}\r\n\r\nexport const toDoAPI = {\r\n    getToDoLists(){\r\n        return instance.get(`/todo-lists`)\r\n            .then(response => response.data);\r\n    },\r\n    postToDoLists(title){\r\n        return instance.post(`/todo-lists`, {title})\r\n            .then(response => response.data);\r\n            //resultCode messages[]\r\n            // data -> item:{id title addedDate order}\r\n    },\r\n    renameToDoList(todolistId, title){\r\n        return instance.put(`/todo-lists/${todolistId}`, {title})\r\n            .then(response => response.data);\r\n            //check response\r\n    },\r\n    deleteToDoList(todolistId){\r\n        return instance.delete(`/todo-lists/${todolistId}`)\r\n            .then(response => response.data);\r\n            //resultCode messages[] data{}\r\n    },\r\n    reorderToDoList(todolistId, putAfterItemId){\r\n        //putAfterItemId: 'string'\r\n        return instance.put(`/todo-lists/${todolistId}/reorder`, {putAfterItemId: putAfterItemId})\r\n            .then(response => response.data);\r\n            //resultCode messages[] data{}\r\n    }\r\n}\r\n\r\nexport const tasksAPI = {\r\n    getTasks(todolistId){\r\n        return instance.get(`/todo-lists/${todolistId}/tasks`)\r\n            .then(response => response.data);\r\n    },\r\n    postTasks(todolistId, title){\r\n        return instance.post(`/todo-lists/${todolistId}/tasks`, {title})\r\n            .then(response => response.data);\r\n    },\r\n    deleteTasks(todolistId, taskId){\r\n        return instance.delete(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n            .then(response => response.data);\r\n    },\r\n    updateTasks(todolistId, taskId, updateTask){\r\n        return instance.put(`/todo-lists/${todolistId}/tasks/${taskId}`, updateTask)\r\n            .then(response => response.data);\r\n    },\r\n    reorderTasks(todolistId, taskId, putAfterItemId){\r\n        return instance.put(`/todo-lists/${todolistId}/tasks/${taskId}/reorder`, {putAfterItemId})\r\n            .then(response => response.data);\r\n    }\r\n}","import { toDoAPI } from \"../api/api\";\r\n\r\nconst SET_LISTS = 'SET-LISTS';\r\nconst SET_TASKS = 'SET-TASKS';\r\nconst CREATE_LIST = 'CREATE-LIST';\r\nconst DELETE_LIST = 'DELETE-LIST';\r\nconst RENAME_LIST = 'RENAME-LIST';\r\nconst IS_FETCH = 'IS-FETCH';\r\nconst CHANGE_ORD = 'CHANGE-ORD';\r\nconst GET_TASKS = 'GET-TASKS';\r\n\r\nconst initial = {\r\n    lists: [\r\n        {\r\n            \"id\": \"9f27f97b-bc63-4114-9baa-c91facbd4ffb\",\r\n            \"title\": \"what todo\",\r\n            \"addedDate\": \"2019-07-30T12:24:15.063\",\r\n            \"order\": 0\r\n        }\r\n    ],\r\n    tasks: [],\r\n    isFetching: false\r\n}\r\n\r\nconst toDoPage = (state = initial, action) => {\r\n\r\n    switch (action.type) {\r\n        case SET_LISTS: {\r\n\r\n            return {\r\n                ...state,\r\n                lists: action.lists\r\n            }\r\n        }\r\n        case CREATE_LIST: {\r\n            return {\r\n                ...state,\r\n                lists: [action.list, ...state.lists]\r\n            }\r\n        }\r\n        case DELETE_LIST: {\r\n            return {\r\n                ...state,\r\n                lists: state.lists.filter(list => list.id !== action.todolistId)\r\n            }\r\n        }\r\n        case RENAME_LIST: {\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(list => { if (list.id === action.todolistId) { return { ...list, title: action.title } } else return list })\r\n            }\r\n        }\r\n        case IS_FETCH: {\r\n            return {\r\n                ...state,\r\n                isFetching: action.bool\r\n            }\r\n        }\r\n        case CHANGE_ORD: {\r\n            let a, indexs;\r\n            let array = state.lists;\r\n\r\n            array.forEach((elem, index) => {\r\n                if (elem.id === action.todolistId) {\r\n                    indexs = index;\r\n                }\r\n            })\r\n            \r\n            a = array[indexs];\r\n            array[indexs] = array[indexs + 1];\r\n            array[indexs + 1] = a;            \r\n            return {\r\n                ...state,\r\n                lists: array.map(item => {return item})\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nconst setLists = (lists) => ({ type: SET_LISTS, lists });\r\nconst setTasks = (tasks) => ({ type: SET_TASKS, tasks });\r\nconst createList = (list) => ({ type: CREATE_LIST, list });\r\nconst deleteList = (todolistId) => ({ type: DELETE_LIST, todolistId });\r\nconst renameTitle = (todolistId, title) => ({ type: RENAME_LIST, todolistId, title });\r\nconst isFetching = (bool) => ({ type: IS_FETCH, bool });\r\nconst changeOrder = (todolistId, putAfterItemId, bool) => ({ type: CHANGE_ORD, todolistId, putAfterItemId, bool })\r\n\r\n\r\nexport const getLists = () => async (dispatch) => {\r\n    dispatch(isFetching(true));\r\n    let response = await toDoAPI.getToDoLists();\r\n    dispatch(isFetching(false));\r\n    (response.length !== 0) && dispatch(setLists(response));\r\n}\r\n\r\nexport const postList = (title) => async (dispatch) => {\r\n    let response = await toDoAPI.postToDoLists(title);\r\n    (response.resultCode === 0) && dispatch(createList(response.data.item));\r\n}\r\n\r\nexport const deleteListThunk = (todolistId) => async (dispatch) => {\r\n    let response = await toDoAPI.deleteToDoList(todolistId);\r\n    (response.resultCode === 0) && dispatch(deleteList(todolistId));\r\n}\r\n\r\n\r\nexport const renameTitleThunk = (todolistId, title) => async (dispatch) => {\r\n    let response = await toDoAPI.renameToDoList(todolistId, title);\r\n    (response.resultCode === 0) && dispatch(renameTitle(todolistId, title))\r\n}\r\n\r\nexport const changeOrderThunk = (todolistId, putAfterItemId, bool) => async (dispatch) => {\r\n    let response = await toDoAPI.reorderToDoList(todolistId, putAfterItemId);\r\n    // (response.resultCode === 0) && dispatch(getLists());\r\n    (response.resultCode === 0) && dispatch(changeOrder(todolistId, putAfterItemId, bool));\r\n}\r\n\r\n\r\n\r\nexport default toDoPage;","import { tasksAPI, toDoAPI } from \"../api/api\";\r\n\r\nconst GET_TASKS = 'GET-TASKS';\r\nconst POST_TASK = 'POST-TASK';\r\nconst DEL_TASK = 'DEL_TASK';\r\nconst UPDATE_TASK = 'UPDATE-TASK';\r\nconst REORDER_TASK = 'REORDER-TASK';\r\n\r\n\r\nconst initial = {\r\n    tasks: [],\r\n    default: {\r\n        description: 'no desc',\r\n        completed: false,\r\n        status: 0,\r\n        priority: 1,\r\n        startDate: '2020',\r\n        deadline: 'today'\r\n    }\r\n}\r\n\r\nconst toDoTasksPage = (state = initial, action) => {\r\n\r\n    switch (action.type) {\r\n        case GET_TASKS: {\r\n            return {\r\n                ...state,\r\n                tasks: action.tasks\r\n            }\r\n        }\r\n        case POST_TASK: {\r\n            return {\r\n                ...state,\r\n                tasks: [action.taskItem, ...state.tasks]\r\n            }\r\n        }\r\n        case DEL_TASK: {\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.filter(elem => elem.id !== action.taskId)\r\n            }\r\n        }\r\n        case UPDATE_TASK: {\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.map(task => {\r\n                    if ( task.id === action.taskId ){\r\n                        return action.item;                        \r\n                    }\r\n                    else return task;\r\n                } )\r\n            }\r\n        }\r\n        case REORDER_TASK: {\r\n            let a, indexs;\r\n            let array = state.tasks;\r\n\r\n            array.forEach((elem, index) => {\r\n                if (elem.id === action.taskId) {\r\n                    indexs = index;\r\n                }\r\n            })\r\n            \r\n            a = array[indexs];\r\n            array[indexs] = array[indexs + 1];\r\n            array[indexs + 1] = a;            \r\n            return {\r\n                ...state,\r\n                tasks: array.map(item => {return item})\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nconst getTasks = (tasks) => ({ type: GET_TASKS, tasks });\r\nconst postTasks = (taskItem) => ({ type: POST_TASK, taskItem });\r\nconst deleteTask = (taskId) => ({ type: DEL_TASK, taskId });\r\nconst updateTask = (taskId, item) => ({ type: UPDATE_TASK, taskId, item})\r\nconst reorderTask = (taskId) => ({type: REORDER_TASK ,taskId })\r\n\r\nexport const getTasksThunk = (todolistId) => async (dispatch) => {\r\n    let response = await tasksAPI.getTasks(todolistId);\r\n    dispatch(getTasks(response.items));\r\n}\r\n\r\nexport const postTasksThunk = (todolistId, title) => async (dispatch) => {\r\n    let response = await tasksAPI.postTasks(todolistId, title);\r\n    (response.resultCode === 0) && dispatch(postTasks(response.data.item));\r\n}\r\n\r\nexport const deleteTaskThunk = (todolistId, taskId) => async (dispatch) => {\r\n    let response = await tasksAPI.deleteTasks(todolistId, taskId);\r\n    (response.resultCode === 0) && dispatch(deleteTask(taskId));\r\n}\r\n\r\nexport const updateTaskThunk =\r\n    (todolistId, taskId, title,\r\n        description = 'no desc', completed = false,\r\n        status = 0, priority = 1, startDate = '2020-12-06T13:06:41.327',\r\n        deadline = '2020-12-06T13:06:41.327') => async (dispatch) => {\r\n            let updatedTaskObject = { title, description, completed, status, priority, startDate, deadline };\r\n            let response = await tasksAPI.updateTasks(todolistId, taskId, updatedTaskObject);\r\n            (response.resultCode === 0) && dispatch(updateTask(taskId, response.data.item))\r\n}\r\n\r\nexport const reoderTaskThunk = (todolistId, taskId, putAfterItemId) => async (dispatch) => {\r\n    let response = await tasksAPI.reorderTasks(todolistId, taskId, putAfterItemId);\r\n    (response.resultCode === 0) && dispatch(reorderTask(taskId));\r\n}\r\n\r\nexport default toDoTasksPage;\r\n\r\n","import style from './Tasks.module.css';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst Task = React.memo(props => {\r\n\r\n    let [newTask, changeNewTask] = useState('');\r\n\r\n    let [editMode, changeEditMode] = useState(false);\r\n    let [TaskText, changeTaskText] = useState('');\r\n\r\n    let deleteTask = (taskId) => {\r\n        props.deleteTask(props.id, taskId);\r\n    }\r\n\r\n    let setTaskText = (text) => {\r\n        changeTaskText(text);\r\n    } \r\n\r\n    let setStatusModeTrue = (text) => {\r\n        changeTaskText(text);\r\n        changeEditMode(!editMode);\r\n    }\r\n\r\n    let setStatusModeFalse = (taskId) => {\r\n        changeEditMode(!editMode);\r\n        //Thunk\r\n        props.updateTask(props.id, taskId, TaskText);\r\n    }\r\n\r\n    let changeOrderTasks = (taskId, putAfterItemId) => {\r\n        props.reoderTask(props.id, taskId, putAfterItemId);\r\n       \r\n    }\r\n\r\n    let taskArray = props.tasks.map((task, index, array) => {\r\n        if (task.todoListId === props.id) {\r\n            return <div key={task.id} className={style.taskItem}>\r\n                <div>\r\n                    {editMode \r\n                    ? <input autoFocus={true} onBlur={() => setStatusModeFalse(task.id)} onChange={(e) => setTaskText(e.currentTarget.value)} type=\"text\" value={TaskText}/>\r\n                    : <span onDoubleClick={() => setStatusModeTrue(task.title)}>{task.title}</span>\r\n                    }\r\n                    <span>\r\n                        {index < array.length-1 && <input onClick={() => changeOrderTasks(array[index].id, array[index+1].id)} type=\"button\" value='-'/> }\r\n                        {index > 0 && <input onClick={() => changeOrderTasks(array[index-1].id, array[index].id)} type=\"button\" value='+'/> }\r\n                    </span>\r\n                    <span onClick={() => deleteTask(task.id)} className={style.delete}>X</span>    \r\n                </div>\r\n               \r\n            </div>\r\n        }\r\n    });\r\n\r\n    let onTaskChangeText = (text) => {\r\n        changeNewTask(text);\r\n    }\r\n\r\n    let addTask = () => {\r\n\r\n        props.postTasks(props.id, newTask);\r\n        changeNewTask('');\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <textarea value={newTask} onChange={(e) => onTaskChangeText(e.currentTarget.value)} cols=\"30\" />\r\n                <input onClick={addTask} type=\"button\" value=\"Add\" />\r\n            </div>\r\n            <div>\r\n                {taskArray}\r\n            </div>\r\n\r\n\r\n        </div>\r\n    );\r\n});\r\nexport default Task;","import style from './Tasks.module.css';\r\nimport React, { useState } from 'react';\r\nimport Task from './Task';\r\n\r\nconst Tasks = React.memo(props => {\r\n\r\n    let [viewMode, changeViewMode] = useState(false);\r\n    \r\n    \r\n    let viewTasks = (id) => {\r\n        changeViewMode(!viewMode);\r\n        props.getTasks(id);\r\n        \r\n    }\r\n\r\n    // let changeInViewMode = () => {\r\n    //     changeViewMode(!viewMode);\r\n    // }\r\n \r\n    return (\r\n        <div>\r\n            <span  className={style.viewTasks} onClick={() => viewTasks(props.id)}>View tasks</span>\r\n            {viewMode && <div>\r\n                <Task {...props}  />\r\n            </div>}\r\n            \r\n        </div>\r\n    );\r\n});\r\nexport default Tasks;","import style from './Lists.module.css';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Tasks from './ToDoTasks/Tasks';\r\n\r\n\r\nconst List = (props) => {\r\n\r\n    let [editMode, changeEditMode] = useState(false);\r\n    let [choosedTitle, changeTitle] = useState(1);\r\n    let [newTitleText, changeNewTitleText] = useState('');\r\n\r\n    let deleteList = (todolistId) => {\r\n        props.deleteList(todolistId);\r\n    }\r\n    let updateTitle = () => {\r\n        props.renameTitle(choosedTitle, newTitleText);\r\n        changeEditMode(false);\r\n        changeNewTitleText('');\r\n    }\r\n    let activateEditMode = (text, id) => {\r\n        changeTitle(id);\r\n        changeNewTitleText(text);\r\n        changeEditMode(true);\r\n        \r\n    }\r\n    \r\n       let changeOrder = (todolistId, putAfterItemId, bool) => {\r\n        props.changeOrder(todolistId, putAfterItemId, bool);\r\n    }\r\n    \r\n    let listsArray = props.lists.map((list, index, array) => {\r\n        let date = new Date(list.addedDate);\r\n        return (<div key={list.id} className={style.listUI}>\r\n            <div className={style.title}>\r\n\r\n                <span>\r\n                   {(editMode && list.id === choosedTitle)\r\n                   ? <input onBlur={updateTitle} autoFocus={true} onChange={(e) => changeNewTitleText(e.currentTarget.value)} value={newTitleText}></input>\r\n                   : <span onDoubleClick={() => activateEditMode(list.title, list.id)}>{list.title}</span>\r\n                    }\r\n                </span> \r\n                <span onClick={() => deleteList(list.id)} className={style.delTitle}>\r\n                    X\r\n                </span>\r\n            </div>\r\n            <div className={style.tasks}>\r\n                <div>\r\n                    <Tasks postTasks={props.postTasks}\r\n                    deleteTask = {props.deleteTask} \r\n                    getTasks={props.getTasks} \r\n                    id={list.id}\r\n                    reoderTask = {props.reoderTask}\r\n                    updateTask = {props.updateTask}\r\n                    tasks={props.tasks}/>\r\n                </div>\r\n                \r\n            </div>\r\n            <div> \r\n                {index < array.length-1 && <input onClick={() => changeOrder(array[index].id, array[index+1].id , false)} type=\"button\" value='-'/> }\r\n                {index > 0 && <input onClick={() => changeOrder(array[index-1].id, array[index].id, true)} type=\"button\" value='+'/> }\r\n             </div>\r\n            <div className={style.addedDate}>{date.toDateString()}</div>\r\n        </div>);\r\n    });\r\n\r\n    return (<> \r\n    {listsArray}\r\n    </>);\r\n}\r\nexport default List;","import React, { useEffect, useState } from 'react';\r\nimport style from './Lists.module.css';\r\nimport List from './List';\r\nimport Preloader from '../Common/Preloader';\r\n\r\nconst Lists = React.memo(props => {\r\n    let [newTitle, changeNewTitle] = useState('');\r\n    \r\n    \r\n    useEffect(() => {\r\n        props.getLists();\r\n    }, []);\r\n\r\n    let onTitleChangeText = (text) => {\r\n        changeNewTitle(text);\r\n    }\r\n\r\n    let addTitle = () => {\r\n        props.postList(newTitle);\r\n        changeNewTitle('');\r\n    }\r\n\r\n    return <div>\r\n        \r\n        <div className={style.newTitle}>\r\n            <span className={style.textTitle}>\r\n                Enter new title\r\n            </span>\r\n            \r\n            <div>\r\n                <textarea value={newTitle} onChange={(e) => onTitleChangeText(e.currentTarget.value)} cols=\"30\"/>\r\n                <input onClick={addTitle} type=\"button\" value=\"Create\" />\r\n            </div>\r\n\r\n        </div>\r\n\r\n        <div className={style.content}>\r\n            <List \r\n            {...props}\r\n            />\r\n        </div>\r\n\r\n    </div>\r\n});\r\n\r\nexport default Lists;","import { connect } from \"react-redux\";\r\nimport { getLists, postList, deleteListThunk, renameTitleThunk, changeOrderThunk } from \"../../redux/todo-reducer\";\r\nimport { getTasksThunk, postTasksThunk, deleteTaskThunk, updateTaskThunk, reoderTaskThunk } from \"../../redux/todoTasks-reducer\";\r\nimport Lists from \"./Lists\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        lists: state.toDoPage.lists,\r\n        isFetching: state.toDoPage.isFetching,\r\n        tasks: state.toDoTasksPage.tasks\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {\r\n    getLists,\r\n    postList,\r\n    deleteList: deleteListThunk,\r\n    renameTitle: renameTitleThunk,\r\n    getTasks: getTasksThunk,\r\n    changeOrder: changeOrderThunk,\r\n    postTasks: postTasksThunk,\r\n    deleteTask: deleteTaskThunk,\r\n    updateTask: updateTaskThunk,\r\n    reoderTask: reoderTaskThunk\r\n})(Lists);","// import logo from './logo.svg';\nimport { NavLink, Route } from 'react-router-dom';\nimport './App.css';\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport ToDoContainer from './components/ToDoLists/ToDoContainer';\n\n\nfunction App() {\n  return (<>\n    <header>\n      <HeaderContainer />\n    </header>\n\n    <div>\n      <Route path='/todolist' render={() =><ToDoContainer/>}></Route>\n     \n    </div>\n  </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import thunkMiddleware from \"redux-thunk\";\r\nimport  toDoPage  from \"./todo-reducer\";\r\nimport toDoTasksPage from \"./todoTasks-reducer\";\r\nconst { combineReducers, createStore, applyMiddleware } = require(\"redux\");\r\n\r\nconst reducers = combineReducers({\r\n    toDoPage,\r\n    toDoTasksPage\r\n});\r\n\r\nexport const store = createStore(reducers, applyMiddleware(thunkMiddleware));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/redux-store';\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}