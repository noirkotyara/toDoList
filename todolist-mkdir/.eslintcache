[{"E:\\WebP\\react\\toDoList\\todolist-mkdir\\src\\index.js":"1","E:\\WebP\\react\\toDoList\\todolist-mkdir\\src\\reportWebVitals.js":"2","E:\\WebP\\react\\toDoList\\todolist-mkdir\\src\\App.js":"3","E:\\WebP\\react\\toDoList\\todolist-mkdir\\src\\redux\\redux-store.js":"4","E:\\WebP\\react\\toDoList\\todolist-mkdir\\src\\components\\Header\\HeaderContainer.jsx":"5","E:\\WebP\\react\\toDoList\\todolist-mkdir\\src\\components\\Header\\Header.jsx":"6","E:\\WebP\\react\\toDoList\\todolist-mkdir\\src\\components\\ToDoLists\\Lists.jsx":"7","E:\\WebP\\react\\toDoList\\todolist-mkdir\\src\\redux\\todo-reducer.js":"8","E:\\WebP\\react\\toDoList\\todolist-mkdir\\src\\api\\api.js":"9","E:\\WebP\\react\\toDoList\\todolist-mkdir\\src\\components\\ToDoLists\\List.jsx":"10","E:\\WebP\\react\\toDoList\\todolist-mkdir\\src\\components\\Common\\Preloader.jsx":"11","E:\\WebP\\react\\toDoList\\todolist-mkdir\\src\\components\\ToDoLists\\ToDoTasks\\Tasks.jsx":"12","E:\\WebP\\react\\toDoList\\todolist-mkdir\\src\\redux\\todoTasks-reducer.js":"13","E:\\WebP\\react\\toDoList\\todolist-mkdir\\src\\components\\ToDoLists\\ToDoContainer.jsx":"14","E:\\WebP\\react\\toDoList\\todolist-mkdir\\src\\components\\ToDoLists\\ToDoTasks\\Task.jsx":"15","E:\\WebP\\react\\toDoList\\todolist-mkdir\\src\\components\\ToDoLists\\ToDoTasks\\Description.jsx":"16"},{"size":468,"mtime":1607548660123,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":499162500000,"results":"19","hashOfConfig":"18"},{"size":713,"mtime":1607548992671,"results":"20","hashOfConfig":"18"},{"size":369,"mtime":1607258065589,"results":"21","hashOfConfig":"18"},{"size":240,"mtime":1607256380925,"results":"22","hashOfConfig":"18"},{"size":661,"mtime":1607548762765,"results":"23","hashOfConfig":"18"},{"size":1477,"mtime":1607550409979,"results":"24","hashOfConfig":"18"},{"size":3909,"mtime":1607257909332,"results":"25","hashOfConfig":"18"},{"size":2631,"mtime":1607268254792,"results":"26","hashOfConfig":"18"},{"size":2334,"mtime":1607549210682,"results":"27","hashOfConfig":"18"},{"size":264,"mtime":1607548799028,"results":"28","hashOfConfig":"18"},{"size":803,"mtime":1607548712622,"results":"29","hashOfConfig":"18"},{"size":3537,"mtime":1607279772233,"results":"30","hashOfConfig":"18"},{"size":867,"mtime":1607275276375,"results":"31","hashOfConfig":"18"},{"size":3484,"mtime":1607548717443,"results":"32","hashOfConfig":"18"},{"size":1164,"mtime":1607548723543,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"urkxfy",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"36"},"E:\\WebP\\react\\toDoList\\todolist-mkdir\\src\\index.js",[],["73","74"],"E:\\WebP\\react\\toDoList\\todolist-mkdir\\src\\reportWebVitals.js",[],"E:\\WebP\\react\\toDoList\\todolist-mkdir\\src\\App.js",["75"],"// import logo from './logo.svg';\nimport { NavLink, Route } from 'react-router-dom';\nimport './App.scss';\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport ToDoContainer from './components/ToDoLists/ToDoContainer';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/redux-store';\n\n\nconst App = () => {\n  return (<>\n    <header>\n      <HeaderContainer />\n    </header>\n\n    <div>\n      <Route path='/todolist' render={() =><ToDoContainer/>}></Route>\n    </div>\n  </>\n  );\n}\n\nconst AppContainer = () => {\n return <HashRouter>\n  <Provider store={store}>\n    <App/>\n  </Provider>\n</HashRouter>\n}\n\nexport default AppContainer;\n","E:\\WebP\\react\\toDoList\\todolist-mkdir\\src\\redux\\redux-store.js",[],"E:\\WebP\\react\\toDoList\\todolist-mkdir\\src\\components\\Header\\HeaderContainer.jsx",[],"E:\\WebP\\react\\toDoList\\todolist-mkdir\\src\\components\\Header\\Header.jsx",[],"E:\\WebP\\react\\toDoList\\todolist-mkdir\\src\\components\\ToDoLists\\Lists.jsx",["76"],"E:\\WebP\\react\\toDoList\\todolist-mkdir\\src\\redux\\todo-reducer.js",["77","78"],"import { toDoAPI } from \"../api/api\";\r\n\r\nconst SET_LISTS = 'SET-LISTS';\r\nconst SET_TASKS = 'SET-TASKS';\r\nconst CREATE_LIST = 'CREATE-LIST';\r\nconst DELETE_LIST = 'DELETE-LIST';\r\nconst RENAME_LIST = 'RENAME-LIST';\r\nconst IS_FETCH = 'IS-FETCH';\r\nconst CHANGE_ORD = 'CHANGE-ORD';\r\nconst GET_TASKS = 'GET-TASKS';\r\n\r\nconst initial = {\r\n    lists: [\r\n        {\r\n            \"id\": \"9f27f97b-bc63-4114-9baa-c91facbd4ffb\",\r\n            \"title\": \"what todo\",\r\n            \"addedDate\": \"2019-07-30T12:24:15.063\",\r\n            \"order\": 0\r\n        }\r\n    ],\r\n    tasks: [],\r\n    isFetching: false\r\n}\r\n\r\nconst toDoPage = (state = initial, action) => {\r\n\r\n    switch (action.type) {\r\n        case SET_LISTS: {\r\n\r\n            return {\r\n                ...state,\r\n                lists: action.lists\r\n            }\r\n        }\r\n        case CREATE_LIST: {\r\n            return {\r\n                ...state,\r\n                lists: [action.list, ...state.lists]\r\n            }\r\n        }\r\n        case DELETE_LIST: {\r\n            return {\r\n                ...state,\r\n                lists: state.lists.filter(list => list.id !== action.todolistId)\r\n            }\r\n        }\r\n        case RENAME_LIST: {\r\n            return {\r\n                ...state,\r\n                lists: state.lists.map(list => { if (list.id === action.todolistId) { return { ...list, title: action.title } } else return list })\r\n            }\r\n        }\r\n        case IS_FETCH: {\r\n            return {\r\n                ...state,\r\n                isFetching: action.bool\r\n            }\r\n        }\r\n        case CHANGE_ORD: {\r\n            let a, indexs;\r\n            let array = state.lists;\r\n\r\n            array.forEach((elem, index) => {\r\n                if (elem.id === action.todolistId) {\r\n                    indexs = index;\r\n                }\r\n            })\r\n            \r\n            a = array[indexs];\r\n            array[indexs] = array[indexs + 1];\r\n            array[indexs + 1] = a;            \r\n            return {\r\n                ...state,\r\n                lists: array.map(item => {return item})\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nconst setLists = (lists) => ({ type: SET_LISTS, lists });\r\nconst setTasks = (tasks) => ({ type: SET_TASKS, tasks });\r\nconst createList = (list) => ({ type: CREATE_LIST, list });\r\nconst deleteList = (todolistId) => ({ type: DELETE_LIST, todolistId });\r\nconst renameTitle = (todolistId, title) => ({ type: RENAME_LIST, todolistId, title });\r\nconst isFetching = (bool) => ({ type: IS_FETCH, bool });\r\nconst changeOrder = (todolistId, putAfterItemId, bool) => ({ type: CHANGE_ORD, todolistId, putAfterItemId, bool })\r\n\r\n\r\nexport const getLists = () => async (dispatch) => {\r\n    dispatch(isFetching(true));\r\n    let response = await toDoAPI.getToDoLists();\r\n    dispatch(isFetching(false));\r\n    (response.length !== 0) && dispatch(setLists(response));\r\n}\r\n\r\nexport const postList = (title) => async (dispatch) => {\r\n    let response = await toDoAPI.postToDoLists(title);\r\n    (response.resultCode === 0) && dispatch(createList(response.data.item));\r\n}\r\n\r\nexport const deleteListThunk = (todolistId) => async (dispatch) => {\r\n    let response = await toDoAPI.deleteToDoList(todolistId);\r\n    (response.resultCode === 0) && dispatch(deleteList(todolistId));\r\n}\r\n\r\n\r\nexport const renameTitleThunk = (todolistId, title) => async (dispatch) => {\r\n    let response = await toDoAPI.renameToDoList(todolistId, title);\r\n    (response.resultCode === 0) && dispatch(renameTitle(todolistId, title))\r\n}\r\n\r\nexport const changeOrderThunk = (todolistId, putAfterItemId, bool) => async (dispatch) => {\r\n    let response = await toDoAPI.reorderToDoList(todolistId, putAfterItemId);\r\n    // (response.resultCode === 0) && dispatch(getLists());\r\n    (response.resultCode === 0) && dispatch(changeOrder(todolistId, putAfterItemId, bool));\r\n}\r\n\r\n\r\n\r\nexport default toDoPage;","E:\\WebP\\react\\toDoList\\todolist-mkdir\\src\\api\\api.js",[],"E:\\WebP\\react\\toDoList\\todolist-mkdir\\src\\components\\ToDoLists\\List.jsx",["79"],"import style from './Lists.module.scss';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Tasks from './ToDoTasks/Tasks';\r\n\r\n\r\nconst List = (props) => {\r\n\r\n    let [editMode, changeEditMode] = useState(false);\r\n    let [choosedTitle, changeTitle] = useState(1);\r\n    let [newTitleText, changeNewTitleText] = useState('');\r\n\r\n    let deleteList = (todolistId) => {\r\n        props.deleteList(todolistId);\r\n    }\r\n    let updateTitle = () => {\r\n        props.renameTitle(choosedTitle, newTitleText);\r\n        changeEditMode(false);\r\n        changeNewTitleText('');\r\n    }\r\n    let activateEditMode = (text, id) => {\r\n        changeTitle(id);\r\n        changeNewTitleText(text);\r\n        changeEditMode(true);\r\n        \r\n    }\r\n    \r\n       let changeOrder = (todolistId, putAfterItemId, bool) => {\r\n        props.changeOrder(todolistId, putAfterItemId, bool);\r\n    }\r\n    \r\n    let listsArray = props.lists.map((list, index, array) => {\r\n        let date = new Date(list.addedDate);\r\n        return (<div key={list.id} className={style.listUI}>\r\n            <div className={style.title}>\r\n\r\n                <span>\r\n                   {(editMode && list.id === choosedTitle)\r\n                   ? <input onBlur={updateTitle} autoFocus={true} onChange={(e) => changeNewTitleText(e.currentTarget.value)} value={newTitleText}></input>\r\n                   : <span onDoubleClick={() => activateEditMode(list.title, list.id)}>{list.title}</span>\r\n                    }\r\n                </span> \r\n                <span onClick={() => deleteList(list.id)} className={style.delTitle}>\r\n                    X\r\n                </span>\r\n            </div>\r\n            <div className={style.tasks}>\r\n                <div>\r\n                    <Tasks {...props}id={list.id} />\r\n                </div>\r\n                \r\n            </div>\r\n            <div> \r\n                {index < array.length-1 && <input onClick={() => changeOrder(array[index].id, array[index+1].id , false)} type=\"button\" value='-'/> }\r\n                {index > 0 && <input onClick={() => changeOrder(array[index-1].id, array[index].id, true)} type=\"button\" value='+'/> }\r\n             </div>\r\n            <div className={style.addedDate}>{date.toDateString()}</div>\r\n        </div>);\r\n    });\r\n\r\n    return (<> \r\n    {listsArray}\r\n    </>);\r\n}\r\nexport default List;","E:\\WebP\\react\\toDoList\\todolist-mkdir\\src\\components\\Common\\Preloader.jsx",[],"E:\\WebP\\react\\toDoList\\todolist-mkdir\\src\\components\\ToDoLists\\ToDoTasks\\Tasks.jsx",[],"E:\\WebP\\react\\toDoList\\todolist-mkdir\\src\\redux\\todoTasks-reducer.js",["80"],"import { tasksAPI, toDoAPI } from \"../api/api\";\r\n\r\nconst GET_TASKS = 'GET-TASKS';\r\nconst POST_TASK = 'POST-TASK';\r\nconst DEL_TASK = 'DEL_TASK';\r\nconst UPDATE_TASK = 'UPDATE-TASK';\r\nconst REORDER_TASK = 'REORDER-TASK';\r\n\r\n\r\nconst initial = {\r\n    tasks: [],\r\n    default: {\r\n        description: 'no desc',\r\n        completed: false,\r\n        status: 0,\r\n        priority: 1,\r\n        startDate: '2020',\r\n        deadline: 'today'\r\n    }\r\n}\r\n\r\nconst toDoTasksPage = (state = initial, action) => {\r\n\r\n    switch (action.type) {\r\n        case GET_TASKS: {\r\n            return {\r\n                ...state,\r\n                tasks: action.tasks\r\n            }\r\n        }\r\n        case POST_TASK: {\r\n            return {\r\n                ...state,\r\n                tasks: [action.taskItem, ...state.tasks]\r\n            }\r\n        }\r\n        case DEL_TASK: {\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.filter(elem => elem.id !== action.taskId)\r\n            }\r\n        }\r\n        case UPDATE_TASK: {\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.map(task => {\r\n                    if ( task.id === action.taskId ){\r\n                        return action.item;                        \r\n                    }\r\n                    else return task;\r\n                } )\r\n            }\r\n        }\r\n        case REORDER_TASK: {\r\n            let a, indexs;\r\n            let array = state.tasks;\r\n\r\n            array.forEach((elem, index) => {\r\n                if (elem.id === action.taskId) {\r\n                    indexs = index;\r\n                }\r\n            })\r\n            \r\n            a = array[indexs];\r\n            array[indexs] = array[indexs + 1];\r\n            array[indexs + 1] = a;            \r\n            return {\r\n                ...state,\r\n                tasks: array.map(item => {return item})\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nconst getTasks = (tasks) => ({ type: GET_TASKS, tasks });\r\nconst postTasks = (taskItem) => ({ type: POST_TASK, taskItem });\r\nconst deleteTask = (taskId) => ({ type: DEL_TASK, taskId });\r\nconst updateTask = (taskId, item) => ({ type: UPDATE_TASK, taskId, item})\r\nconst reorderTask = (taskId) => ({type: REORDER_TASK ,taskId })\r\n\r\nexport const getTasksThunk = (todolistId) => async (dispatch) => {\r\n    \r\n    let response = await tasksAPI.getTasks(todolistId);\r\n    dispatch(getTasks(response.items));\r\n}\r\n\r\nexport const postTasksThunk = (todolistId, title) => async (dispatch) => {\r\n    let response = await tasksAPI.postTasks(todolistId, title);\r\n    (response.resultCode === 0) && dispatch(postTasks({...response.data.item, description: 'Description'}));\r\n}\r\n\r\nexport const deleteTaskThunk = (todolistId, taskId) => async (dispatch) => {\r\n    let response = await tasksAPI.deleteTasks(todolistId, taskId);\r\n    (response.resultCode === 0) && dispatch(deleteTask(taskId));\r\n}\r\n\r\nexport const updateTaskThunk =\r\n    (todolistId, taskId, updatedTaskObject) => async (dispatch) => {\r\n            let response = await tasksAPI.updateTasks(todolistId, taskId, updatedTaskObject);\r\n            (response.resultCode === 0) && dispatch(updateTask(taskId, response.data.item))\r\n}\r\n\r\nexport const reorderTaskThunk = (todolistId, taskId, putAfterItemId) => async (dispatch) => {\r\n    let response = await tasksAPI.reorderTasks(todolistId, taskId, putAfterItemId);\r\n    (response.resultCode === 0) && dispatch(reorderTask(taskId));\r\n}\r\n\r\nexport default toDoTasksPage;\r\n\r\n\r\n","E:\\WebP\\react\\toDoList\\todolist-mkdir\\src\\components\\ToDoLists\\ToDoContainer.jsx",[],"E:\\WebP\\react\\toDoList\\todolist-mkdir\\src\\components\\ToDoLists\\ToDoTasks\\Task.jsx",["81","82"],"import style from './Tasks.module.scss';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Description from './Description';\r\n\r\nconst Task = React.memo(props => {\r\n\r\n    let [newTask, changeNewTask] = useState('');\r\n\r\n    let [editMode, changeEditMode] = useState(false);\r\n    let [TaskText, changeTaskText] = useState('');\r\n    let [choosedTask, changeChoosedTask] = useState('');\r\n    \r\n\r\n    let deleteTask = (taskId) => {\r\n        props.deleteTask(props.id, taskId);\r\n    }\r\n\r\n    let setTaskText = (text) => {\r\n        changeTaskText(text);\r\n    } \r\n\r\n    let setStatusModeTrue = (text, taskId) => {\r\n        changeChoosedTask(taskId)\r\n        changeTaskText(text);\r\n        changeEditMode(!editMode);\r\n    }\r\n\r\n    let setStatusModeFalse = (task) => {\r\n        changeEditMode(!editMode);\r\n        props.updateTask(props.id, task.id, {...task, title:TaskText});\r\n    }\r\n\r\n    let changeOrderTasks = (taskId, putAfterItemId) => {\r\n        props.reoderTask(props.id, taskId, putAfterItemId);\r\n    }\r\n\r\n    let changeCheckBox = (bool, task) => {\r\n        let intBool = Number(bool);\r\n        props.updateTask(props.id, task.id, {...task, status: intBool });\r\n    }\r\n\r\n    let taskArray = props.tasks.map((task, index, array) => {\r\n        if (task.todoListId === props.id) {\r\n            let date = new Date(task.addedDate);\r\n            return <div key={task.id} className={style.taskItem}>\r\n                <div>\r\n                    {(editMode && choosedTask === task.id)\r\n                    ? <input autoFocus={true} onBlur={() => setStatusModeFalse(task)} onChange={(e) => setTaskText(e.currentTarget.value)} type=\"text\" value={TaskText}/>\r\n                    : <span onDoubleClick={() => setStatusModeTrue(task.title, task.id)}>{task.title}</span>\r\n                    }\r\n                     <span onClick={() => deleteTask(task.id)} className={style.delete}>X</span>  \r\n                     <input checked={task.status} onChange={(e) => changeCheckBox(e.currentTarget.checked,task)} className={style.complete} type='checkbox'></input>\r\n                <div>\r\n                    <Description \r\n                                task={task}\r\n                                taskId = {task.id}\r\n                                updateTask={props.updateTask}\r\n                                id={props.id}/>\r\n                </div>\r\n                <div className={style.date}>{date.toDateString() + ' ' + date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds()}</div>\r\n                    <div>\r\n                        {index < array.length-1 && <input onClick={() => changeOrderTasks(array[index].id, array[index+1].id)} type=\"button\" value='-'/> }\r\n                        {index > 0 && <input onClick={() => changeOrderTasks(array[index-1].id, array[index].id)} type=\"button\" value='+'/> }\r\n                    </div> \r\n                </div>\r\n            </div>\r\n        }\r\n    });\r\n\r\n    let onTaskChangeText = (text) => {\r\n        changeNewTask(text);\r\n    }\r\n\r\n    let addTask = () => {\r\n\r\n        props.postTasks(props.id, newTask);\r\n        changeNewTask('');\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <textarea value={newTask} onChange={(e) => onTaskChangeText(e.currentTarget.value)} cols=\"30\" />\r\n                <input onClick={addTask} type=\"button\" value=\"Add\" />\r\n            </div>\r\n            <div>\r\n                {taskArray}\r\n            </div>\r\n\r\n\r\n        </div>\r\n    );\r\n});\r\nexport default Task;","E:\\WebP\\react\\toDoList\\todolist-mkdir\\src\\components\\ToDoLists\\ToDoTasks\\Description.jsx",["83","84"],"import style from './Tasks.module.scss';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst Description = React.memo( props => {\r\n\r\n    let [editMode, changeEditMode] = useState(false);\r\n    let [choosedTaskId, changeChoosedTaskId ] = useState('');\r\n    let [newDesc, changeNewDesc] = useState(props.task.description);\r\n    \r\n    let turnEditMode = () => {\r\n        \r\n        changeEditMode(!editMode);\r\n        changeChoosedTaskId(props.taskId);\r\n    }\r\n\r\n    let onChangeDesc = (newText) => {\r\n        changeNewDesc(newText);\r\n    }\r\n    let updateDesc = (task) => {\r\n       \r\n        changeEditMode(!editMode);\r\n        props.updateTask(props.id, props.taskId, {...props.task, description: newDesc})\r\n        debugger\r\n    }\r\n    \r\n    return(\r\n        <div>\r\n            {(editMode && choosedTaskId === props.taskId)\r\n            ? <textarea type='text' onBlur={() => updateDesc()} onChange={(e) => onChangeDesc(e.currentTarget.value)} autoFocus={true} value={newDesc}></textarea>\r\n            :<span onDoubleClick={turnEditMode}>{props.task.description}</span>\r\n            }\r\n            \r\n\r\n        </div>\r\n    )\r\n});\r\nexport default Description;",{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":2,"column":10,"nodeType":"91","messageId":"92","endLine":2,"endColumn":17},{"ruleId":"93","severity":1,"message":"94","line":11,"column":8,"nodeType":"95","endLine":11,"endColumn":10,"suggestions":"96"},{"ruleId":"89","severity":1,"message":"97","line":10,"column":7,"nodeType":"91","messageId":"92","endLine":10,"endColumn":16},{"ruleId":"89","severity":1,"message":"98","line":84,"column":7,"nodeType":"91","messageId":"92","endLine":84,"endColumn":15},{"ruleId":"89","severity":1,"message":"99","line":2,"column":17,"nodeType":"91","messageId":"92","endLine":2,"endColumn":26},{"ruleId":"89","severity":1,"message":"100","line":1,"column":20,"nodeType":"91","messageId":"92","endLine":1,"endColumn":27},{"ruleId":"89","severity":1,"message":"99","line":2,"column":17,"nodeType":"91","messageId":"92","endLine":2,"endColumn":26},{"ruleId":"101","severity":1,"message":"102","line":42,"column":58,"nodeType":"103","messageId":"104","endLine":42,"endColumn":60},{"ruleId":"89","severity":1,"message":"105","line":1,"column":8,"nodeType":"91","messageId":"92","endLine":1,"endColumn":13},{"ruleId":"89","severity":1,"message":"99","line":2,"column":17,"nodeType":"91","messageId":"92","endLine":2,"endColumn":26},"no-native-reassign",["106"],"no-negated-in-lhs",["107"],"no-unused-vars","'NavLink' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["108"],"'GET_TASKS' is assigned a value but never used.","'setTasks' is assigned a value but never used.","'useEffect' is defined but never used.","'toDoAPI' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'style' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"109","fix":"110"},"Update the dependencies array to be: [props]",{"range":"111","text":"112"},[283,285],"[props]"]